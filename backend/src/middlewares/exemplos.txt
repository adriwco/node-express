const express = require('express');
const app = express();

// Middleware de registro de logs
app.use((req, res, next) => {
  console.log(`${req.method} ${req.url}`);
  next(); // Passa para o próximo middleware
});

// Middleware de análise de JSON
app.use(express.json());

// Middleware de autenticação
const authMiddleware = (req, res, next) => {
  const token = req.headers['authorization'];
  if (token === 'seu-token-de-autenticacao') {
    next(); // Token válido, passa para o próximo middleware
  } else {
    res.status(401).json({ error: 'Unauthorized' }); // Token inválido, encerra o ciclo de solicitação-resposta
  }
};

app.use(authMiddleware);

// Rota de exemplo
app.get('/api/data', (req, res) => {
  res.json({ message: 'Dados protegidos' });
});

// Middleware de tratamento de erros
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal Server Error' });
});

// Iniciar o servidor
app.listen(3000, () => {
  console.log('Servidor rodando na porta 3000');
});
